<?xml version="1.0" encoding="UTF-8" standalone="yes"?><danepracy><studiauczelnia>Uniwersytet Gdański</studiauczelnia><studiawydzial>Wydział Matematyki, Fizyki i Informatyki</studiawydzial><studiakierunek>Informatyka</studiakierunek><studiatryb>stacjonarne</studiatryb><studentimie>Szymon</studentimie><studentnazwisko>Rękawek</studentnazwisko><studentalbum>206288</studentalbum><pracaopiekun>prof. UG, dr hab. Tomasz Dzido</pracaopiekun><pracaprowadzacy>prof. UG, dr hab. Tomasz Dzido</pracaprowadzacy><pracatytul>Gra Thuego</pracatytul><pracadziedzina>11.3|Informatyka</pracadziedzina><pracarok>2016</pracarok><pracadatazlozenia>16-06-2016</pracadatazlozenia><pracastreszczenie>Celem pracy było zaprogramowanie i analiza wyników gry opartej na twierdzeniach Axela Thue związanej z powtórzeniami oraz nasunięciami wewnątrz ciągu znaków. Głównymi funkcjonalnościami aplikacji jest rozgrywka między dwoma graczami oraz symulacja przeprowadzona przez konkurujące ze sobą algorytmy. &#xD;
&#xD;
Powstały dwa warianty aplikacji. Pierwszy z nich napisany za pomocą silnika Unity3d, posiada interfejs graficzny, nie ma jednak innego zastosowania niż poprawianie własnych rekordów. Drugi jest napisany w języku Java, bez interfejsu graficznego, w zamian oferuje funkcjonalność dokonywania testów na serwerze zdalnym i zawiera wiele opcji konfiguracyjnych, między innymi ustawianie poziomu zagnieżdżenia rekurencji, którego używają algorytmy.&#xD;
&#xD;
Przeprowadzone testy wykazały, że algorytmy symulujące graczy działają prawidłowo i zwiększanie poziomu zagnieżdżenia wykorzystywanej przez nich rekurencji skutkuje lepiej podejmowanymi decyzjami. Na podstawie badań ustalona została maksymalna długość rozgrywki przy odpowiedniej taktyce dla rozgrywek zawierających określoną ilość symboli, z których tworzony jest ciąg.</pracastreszczenie><pracaslowakluczowe>Thue, Java, ciąg, programowanie, Unity3d</pracaslowakluczowe><pracaspistresci>## Spis treści&#xD;
Wprowadzenie 6&#xD;
1. Opis struktur pozwalających na stworzenie gry  7 &#xD;
1.1. Definicje 7 &#xD;
1.2. Thue-Morse word 8 &#xD;
1.3. Square-free word 10 &#xD;
1.4. Thue online 11 &#xD;
1.5. Komputerowa implementacja Online Thue Game 12&#xD;
2. Aplikacja Longest Free Word 14&#xD;
2.1. Plik konfiguracyjny 14&#xD;
2.2. Algorytm szukający powtórzeń wewnątrz ciągu 16&#xD;
2.3. Komunikacja z użytkownikiem 21&#xD;
2.4. Zachłanny algorytm wyszukiwania symbolu 23&#xD;
2.5. Zachłanny algorytm wyszukiwania indeksu 25&#xD;
2.6. Algorytm wyszukiwania symbolu wykorzystujący rekurencję 26&#xD;
2.7. Algorytm wyszukiwania indeksu wykorzystujący rekurencję 29&#xD;
2.8. Longest square free word z interfejsem graficznym 30&#xD;
3. Analiza symulowanych potyczek 32&#xD;
3.1. Ilość symboli potrzebna na rozegranie partii 32&#xD;
3.2. Pomiary czasów potrzebnych na podjęcie decyzji 35&#xD;
3.3. Porównanie zachowań algorytmu z zagnieżdżeniami i bez zagnieżdżeń 40&#xD;
Zakończenie 43 &#xD;
Bibliografia 44 &#xD;
Spis tabel 45&#xD;
Spis rysunków 46 &#xD;
Spis kodów źródłowych 48 &#xD;
Oświadczenie 49</pracaspistresci></danepracy>